[{"path":"https://charl3456.github.io/biost561fp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yunjing Hong. Author, maintainer, copyright holder.","code":""},{"path":"https://charl3456.github.io/biost561fp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hong Y (2024). biost561fp: Traveling Salesperson Problem Solver. R package version 0.1.0, https://charl3456.github.io/biost561fp/.","code":"@Manual{,   title = {biost561fp: Traveling Salesperson Problem Solver},   author = {Yunjing Hong},   year = {2024},   note = {R package version 0.1.0},   url = {https://charl3456.github.io/biost561fp/}, }"},{"path":"https://charl3456.github.io/biost561fp/index.html","id":"biost561fp","dir":"","previous_headings":"","what":"Traveling Salesperson Problem Solver","title":"Traveling Salesperson Problem Solver","text":"biost561fp R package provides tools solve Traveling Salesperson Problem (TSP) using various heuristic methods. - URL GitHub (.e., source code) : https://github.com/Charl3456/biost561fp - URL Pkgdown webpage : https://Charl3456.github.io/biost561fp/ ## Installation can install development version biost561fp GitHub :","code":"# Install devtools if you haven't already install.packages(\"devtools\")  # Install biost561fp from GitHub devtools::install_github(\"Charl3456/biost561fp\")"},{"path":"https://charl3456.github.io/biost561fp/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Traveling Salesperson Problem Solver","text":"basic example use biost561fp package solve TSP using different algorithms:","code":"library(biost561fp)  # Generate a random distance matrix set.seed(123) numCities <- 5 distMatrix <- generateRandomDistMatrix(numCities)  # Solve TSP using nearest neighbor algorithm nn_result <- nearestNeighbor(distMatrix) print(nn_result)  # Solve TSP using genetic algorithm ga_result <- geneticAlgorithm(distMatrix) print(ga_result)  # Find the best solution using all methods best_solution <- solveTSP(distMatrix) print(best_solution)"},{"path":"https://charl3456.github.io/biost561fp/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Traveling Salesperson Problem Solver","text":"package depends following packages: GA stats.","code":""},{"path":"https://charl3456.github.io/biost561fp/index.html","id":"session-info","dir":"","previous_headings":"","what":"Session info","title":"Traveling Salesperson Problem Solver","text":"package developed following environment","code":"> devtools::session_info() ─ Session info ─────────────────────────────────────────  setting  value  version  R version 4.4.0 (2024-04-24 ucrt)  os       Windows 11 x64 (build 22631)  system   x86_64, mingw32  ui       RStudio  language (EN)  collate  English_United States.utf8  ctype    English_United States.utf8  tz       America/Los_Angeles  date     2024-05-26  rstudio  2024.04.1+748 Chocolate Cosmos (desktop)  pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)  ─ Packages ─────────────────────────────────────────────  package     * version date (UTC) lib source  cachem        1.1.0   2024-05-16 [1] CRAN (R 4.4.0)  cli           3.6.2   2023-12-11 [1] CRAN (R 4.4.0)  devtools      2.4.5   2022-10-11 [1] CRAN (R 4.4.0)  digest        0.6.35  2024-03-11 [1] CRAN (R 4.4.0)  ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.4.0)  evaluate      0.23    2023-11-01 [1] CRAN (R 4.4.0)  fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.0)  fs            1.6.4   2024-04-25 [1] CRAN (R 4.4.0)  glue          1.7.0   2024-01-09 [1] CRAN (R 4.4.0)  htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.0)  htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.4.0)  httpuv        1.6.15  2024-03-26 [1] CRAN (R 4.4.0)  knitr         1.46    2024-04-06 [1] CRAN (R 4.4.0)  later         1.3.2   2023-12-06 [1] CRAN (R 4.4.0)  lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.4.0)  magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.4.0)  memoise       2.0.1   2021-11-26 [1] CRAN (R 4.4.0)  mime          0.12    2021-09-28 [1] CRAN (R 4.4.0)  miniUI        0.1.1.1 2018-05-18 [1] CRAN (R 4.4.0)  pkgbuild      1.4.4   2024-03-17 [1] CRAN (R 4.4.0)  pkgload       1.3.4   2024-01-16 [1] CRAN (R 4.4.0)  profvis       0.3.8   2023-05-02 [1] CRAN (R 4.4.0)  promises      1.3.0   2024-04-05 [1] CRAN (R 4.4.0)  purrr         1.0.2   2023-08-10 [1] CRAN (R 4.4.0)  R6            2.5.1   2021-08-19 [1] CRAN (R 4.4.0)  Rcpp          1.0.12  2024-01-09 [1] CRAN (R 4.4.0)  remotes       2.5.0   2024-03-17 [1] CRAN (R 4.4.0)  rlang         1.1.3   2024-01-10 [1] CRAN (R 4.4.0)  rmarkdown     2.27    2024-05-17 [1] CRAN (R 4.4.0)  rstudioapi    0.16.0  2024-03-24 [1] CRAN (R 4.4.0)  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.4.0)  shiny         1.8.1.1 2024-04-02 [1] CRAN (R 4.4.0)  stringi       1.8.4   2024-05-06 [1] CRAN (R 4.4.0)  stringr       1.5.1   2023-11-14 [1] CRAN (R 4.4.0)  urlchecker    1.0.1   2021-11-30 [1] CRAN (R 4.4.0)  usethis       2.2.3   2024-02-19 [1] CRAN (R 4.4.0)  vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.4.0)  xfun          0.44    2024-05-15 [1] CRAN (R 4.4.0)  xtable        1.8-4   2019-04-21 [1] CRAN (R 4.4.0)   [1] C:/Users/yunji/AppData/Local/R/win-library/4.4  [2] C:/Program Files/R/R-4.4.0/library  ────────────────────────────────────────────────────────"},{"path":"https://charl3456.github.io/biost561fp/reference/generateRandomDistMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Distance Matrix — generateRandomDistMatrix","title":"Generate Random Distance Matrix — generateRandomDistMatrix","text":"function generates random symmetric distance matrix Traveling Salesperson Problem.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/generateRandomDistMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Distance Matrix — generateRandomDistMatrix","text":"","code":"generateRandomDistMatrix(numCities, maxDistance = 100)"},{"path":"https://charl3456.github.io/biost561fp/reference/generateRandomDistMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Distance Matrix — generateRandomDistMatrix","text":"numCities number cities. maxDistance maximum distance cities. Default 100.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/generateRandomDistMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Random Distance Matrix — generateRandomDistMatrix","text":"symmetric matrix distances cities.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/generateRandomDistMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Random Distance Matrix — generateRandomDistMatrix","text":"","code":"set.seed(123) distMatrix <- generateRandomDistMatrix(5) print(distMatrix) #>           [,1]      [,2]      [,3]      [,4]     [,5] #> [1,]  0.000000  5.510093 95.726501 90.082672 89.06439 #> [2,]  5.510093  0.000000 45.880081 25.362686 69.58754 #> [3,] 95.726501 45.880081  0.000000  5.163894 64.41017 #> [4,] 90.082672 25.362686  5.163894  0.000000 99.43271 #> [5,] 89.064392 69.587537 64.410175 99.432708  0.00000"},{"path":"https://charl3456.github.io/biost561fp/reference/geneticAlgorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic Algorithm for TSP — geneticAlgorithm","title":"Genetic Algorithm for TSP — geneticAlgorithm","text":"function solves Traveling Salesperson Problem using genetic algorithm.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/geneticAlgorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic Algorithm for TSP — geneticAlgorithm","text":"","code":"geneticAlgorithm(distMatrix, popSize = 50, maxGenerations = 100)"},{"path":"https://charl3456.github.io/biost561fp/reference/geneticAlgorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genetic Algorithm for TSP — geneticAlgorithm","text":"distMatrix distance matrix representing distances cities. popSize size population genetic algorithm. Default 50. maxGenerations maximum number generations genetic algorithm. Default 100.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/geneticAlgorithm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genetic Algorithm for TSP — geneticAlgorithm","text":"list containing best tour total distance tour.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/geneticAlgorithm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genetic Algorithm for TSP — geneticAlgorithm","text":"","code":"distMatrix <- matrix(c(   0, 29, 20, 21,   29, 0, 15, 17,   20, 15, 0, 28,   21, 17, 28, 0 ), nrow = 4, byrow = TRUE) result <- geneticAlgorithm(distMatrix) print(result) #> $tour #> x1 x2 x3 x4 x1  #>  2  1  4  3  2  #>  #> $distance #> [1] 382 #>"},{"path":"https://charl3456.github.io/biost561fp/reference/nearestNeighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearest Neighbor TSP Algorithm — nearestNeighbor","title":"Nearest Neighbor TSP Algorithm — nearestNeighbor","text":"function solves Traveling Salesperson Problem using nearest neighbor heuristic.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/nearestNeighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nearest Neighbor TSP Algorithm — nearestNeighbor","text":"","code":"nearestNeighbor(distMatrix)"},{"path":"https://charl3456.github.io/biost561fp/reference/nearestNeighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nearest Neighbor TSP Algorithm — nearestNeighbor","text":"distMatrix distance matrix representing distances cities.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/nearestNeighbor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nearest Neighbor TSP Algorithm — nearestNeighbor","text":"list containing tour total distance tour.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/nearestNeighbor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nearest Neighbor TSP Algorithm — nearestNeighbor","text":"","code":"distMatrix <- matrix(c(   0, 29, 20, 21,   29, 0, 15, 17,   20, 15, 0, 28,   21, 17, 28, 0 ), nrow = 4, byrow = TRUE) result <- nearestNeighbor(distMatrix) print(result) #> $tour #> [1] 1 3 2 4 1 #>  #> $distance #> [1] 73 #>"},{"path":"https://charl3456.github.io/biost561fp/reference/solveTSP.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve TSP Using Multiple Methods — solveTSP","title":"Solve TSP Using Multiple Methods — solveTSP","text":"function solves Traveling Salesperson Problem using multiple heuristic methods returns best solution found.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/solveTSP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve TSP Using Multiple Methods — solveTSP","text":"","code":"solveTSP(distMatrix)"},{"path":"https://charl3456.github.io/biost561fp/reference/solveTSP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve TSP Using Multiple Methods — solveTSP","text":"distMatrix distance matrix representing distances cities.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/solveTSP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve TSP Using Multiple Methods — solveTSP","text":"list containing best tour total distance best tour found algorithms.","code":""},{"path":"https://charl3456.github.io/biost561fp/reference/solveTSP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve TSP Using Multiple Methods — solveTSP","text":"","code":"distMatrix <- matrix(c(   0, 29, 20, 21,   29, 0, 15, 17,   20, 15, 0, 28,   21, 17, 28, 0 ), nrow = 4, byrow = TRUE) result <- solveTSP(distMatrix) print(result) #> $tour #> [1] 1 3 2 4 1 #>  #> $distance #> [1] 73 #>"}]
